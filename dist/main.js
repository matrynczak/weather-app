(()=>{"use strict";const e=document.querySelector(".container"),t=()=>{const t=document.createElement("div"),n=document.createElement("input");t.classList.add("city-container");const c=document.createElement("label");c.textContent="Type the city you are looking for: ",c.setAttribute("for","city"),n.setAttribute("id","city"),n.setAttribute("name","city"),n.setAttribute("placeholder","for example: london");const a=document.createElement("p");a.classList.add("city-error"),a.classList.add("error-hidden"),a.textContent="No such city. Please type correct name.",t.appendChild(c),t.appendChild(n),t.appendChild(a),e.appendChild(t)},n="https://api.openweathermap.org/data/2.5",c="db8843a06888fdc6f9009cf66020233c",a=e=>{let t=e-273.15;return Number.isInteger(t)||(t=parseFloat(t.toFixed(1))),t},d=e=>{const t=a(e),n=document.querySelector(".weather-container"),c=document.querySelector(".temperature"),d=document.querySelector(".temp-value");d.textContent="---"===e?"---":`${t} °C`,n.appendChild(c),c.appendChild(d)},o=e=>{const t=document.querySelector(".weather-container"),n=document.querySelector(".humidity"),c=document.querySelector(".humidity-value");c.textContent=`${e} %`,t.appendChild(n),n.appendChild(c)},r=e=>{const t=document.querySelector(".weather-container"),n=document.querySelector(".pressure"),c=document.querySelector(".pressure-value");c.textContent=`${e} hPa`,t.appendChild(n),n.appendChild(c)},i=e=>{const t=document.querySelector(".weather-container"),n=document.querySelector(".wind"),c=document.querySelector(".wind-value");c.textContent=`${e} m/s`,t.appendChild(n),n.appendChild(c)},s=()=>{const e=document.querySelector(".city-error");e.classList.add("error-display"),e.classList.remove("error-hidden")},l=()=>{const e=document.querySelector(".city-error");e.classList.remove("error-display"),e.classList.add("error-hidden")},u=async e=>{let t={};try{const n=`http://api.openweathermap.org/geo/1.0/direct?q=${e}&limit=1&appid=${c}`,a=await fetch(n);t=await a.json()}catch(e){console.error("ERROR: ",e)}const n=t.length>0;return{isCity:n,x:n?t[0].lat:"",y:n?t[0].lon:""}},p=()=>{const e=document.querySelector(".container");e.replaceChildren(),t();const a=document.querySelector("#city"),p=document.createElement("div");p.classList.add("weather-container"),e.appendChild(p),(()=>{const e=document.querySelector(".container"),t=document.querySelector(".weather-container"),n=document.createElement("div");n.classList.add("weather-gif");const c=document.createElement("img");c.classList.add("weather-gif-content"),c.setAttribute("src","./icons/square.gif"),c.setAttribute("alt","Gif presenting what the weather looks like"),n.textContent="The weather looks like: ";const a=document.createElement("h2");a.textContent="",n.appendChild(a),n.appendChild(c),t.appendChild(n),e.appendChild(t)})(),(()=>{const e=document.querySelector(".container"),t=document.querySelector(".weather-container"),n=document.createElement("div");n.classList.add("temperature");const c=document.createElement("p"),a=document.createElement("span");a.classList.add("temp-value"),c.textContent="TEMPERATURE: ",a.textContent="--- °C",n.appendChild(c),n.appendChild(a),t.appendChild(n),e.appendChild(t)})(),(()=>{const e=document.querySelector(".container"),t=document.querySelector(".weather-container"),n=document.createElement("div");n.classList.add("humidity");const c=document.createElement("p"),a=document.createElement("span");a.classList.add("humidity-value"),c.textContent="HUMIDITY: ",a.textContent="--- %",n.appendChild(c),n.appendChild(a),t.appendChild(n),e.appendChild(t)})(),(()=>{const e=document.querySelector(".container"),t=document.querySelector(".weather-container"),n=document.createElement("div");n.classList.add("pressure");const c=document.createElement("p"),a=document.createElement("span");a.classList.add("pressure-value"),c.textContent="PRESSURE: ",a.textContent="--- hPa",n.appendChild(c),n.appendChild(a),t.appendChild(n),e.appendChild(t)})(),(()=>{const e=document.querySelector(".container"),t=document.querySelector(".weather-container"),n=document.createElement("div");n.classList.add("wind");const c=document.createElement("p"),a=document.createElement("span");a.classList.add("wind-value"),c.textContent="WIND: ",a.textContent="--- m/s",n.appendChild(c),n.appendChild(a),t.appendChild(n),e.appendChild(t)})(),a.addEventListener("change",(async()=>{if(document.querySelector(".weather-gif-content").setAttribute("src","./icons/loader.gif"),""===a.value)return d("---"),o("---"),r("---"),void i("---");const e=await u(a.value);if(e.isCity){l();const t=await(async(e,t)=>{let a={};try{const d=`${n}/weather?lat=${e}&lon=${t}&appId=${c}`,o=await fetch(d);a=await o.json()}catch(e){console.error("ERROR: ",e)}return{main:a.main,wind:a.wind,weatherDesc:a.weather[0]}})(e.x,e.y),a=`weather ${t.weatherDesc.description}`,s=await(async e=>{let t={};try{const n=`https://api.giphy.com/v1/gifs/translate?api_key=bb2006d9d3454578be1a99cfad65913d&s=${e}`,c=await fetch(n);t=await c.json()}catch(e){confirm.error("ERROR: ",e)}return t.data.images.original.url})(a);((e,t)=>{const n=document.querySelector(".weather-container"),c=document.querySelector(".weather-gif"),a=document.querySelector(".weather-gif-content"),d=document.querySelector("h2");d.textContent=e,a.setAttribute("src",t),c.appendChild(d),c.appendChild(a),n.appendChild(c)})(t.weatherDesc.description,s),d(t.main.temp),o(t.main.humidity),r(t.main.pressure),i(t.wind.speed)}else s()}))},m=e=>{const t=new Date(1e3*e),n=`${t.getHours()}:00:00`;return[`${t.getDate()}/${t.getMonth()+1}/${t.getFullYear()}`,n]},h=()=>{const e=document.querySelector(".container");e.replaceChildren(),t();const d=document.querySelector("#city"),o=document.createElement("div");o.classList.add("weather-container"),e.appendChild(o),(()=>{const e=document.querySelector(".weather-container"),t=document.createElement("ul");t.classList.add("days-list"),t.textContent="To get the data, please select the city first.",e.appendChild(t)})(),d.addEventListener("change",(async()=>{if(""===d.value)return void(document.querySelector(".days-list").textContent="To get the data, please select the city first.");const e=await u(d.value);if(e.isCity){l(),(()=>{const e=document.querySelector(".container");document.querySelector(".days-list").textContent="Fetching the data of weather...";const t=document.createElement("div");t.classList.add("loader-wrapper");const n=document.createElement("img");n.classList.add("loader-image"),n.setAttribute("src","./icons/loader.gif"),t.appendChild(n),e.appendChild(t),t.classList.add("loader-displayed")})();const t=await(async(e,t)=>{let a={};try{const d=`${n}/forecast?lat=${e}&lon=${t}&appId=${c}`,o=await fetch(d);a=await o.json()}catch(e){console.error("ERROR: ",e)}return a.list.map((e=>({dt:e.dt,main:e.main,wind:e.wind,weatherDesc:e.weather[0]})))})(e.x,e.y);(()=>{const e=document.querySelector(".loader-wrapper");document.querySelector(".container").removeChild(e)})(),(e=>{const t=document.querySelector(".days-list");t.textContent="",e.forEach((e=>{const n=document.createElement("li"),c=document.createElement("div");c.classList.add("desc-container");const d=document.createElement("div"),o=document.createElement("p"),r=document.createElement("p");d.classList.add("long-term-date"),d.appendChild(o),d.appendChild(r);const i=document.createElement("div");i.classList.add("desc-icon-container");const s=document.createElement("p");s.classList.add("long-term-desc");const l=document.createElement("img");var u;l.classList.add("weather-icon"),l.setAttribute("src",(u=e.weatherDesc.description).includes("rain")?"./icons/deszcz.svg":u.includes("clouds")?"./icons/zachmurzenie.svg":u.includes("clear sky")||u.includes("sun")?"./icons/slonce.svg":"./icons/test.png"),i.appendChild(s),i.appendChild(l),l.setAttribute("alt","Icon of the weather conditions.");const p=document.createElement("div");p.classList.add("weather-metrics");const h=document.createElement("div"),C=document.createElement("p"),y=document.createElement("p");C.textContent="Temperature",y.textContent=`${a(e.main.temp)} °C`,h.appendChild(C),h.appendChild(y);const w=document.createElement("div"),E=document.createElement("p"),v=document.createElement("p");E.textContent="Wind",v.textContent=`${e.wind.speed} m/s`,w.appendChild(E),w.appendChild(v);const q=document.createElement("div"),S=document.createElement("p"),g=document.createElement("p");S.textContent="Humidity",g.textContent=`${e.main.humidity} %`,q.appendChild(S),q.appendChild(g),p.appendChild(h),p.appendChild(w),p.appendChild(q),o.textContent=`${m(e.dt)[0]}`,r.textContent=`${m(e.dt)[1]}`,s.textContent=`${e.weatherDesc.description}`,c.appendChild(d),c.appendChild(i),n.appendChild(c),n.appendChild(p),t.appendChild(n)}))})(t)}else s()}))};(()=>{document.querySelector(".container");const e=document.querySelector(".navigation"),t=document.createElement("li"),n=document.createElement("li"),c=document.createElement("li");t.classList.add("nav-today"),t.classList.add("tab-clicked"),c.classList.add("nav-long-term"),t.textContent="Today",n.textContent="Hourly",c.textContent="Long term",e.appendChild(t),e.appendChild(c);const a=document.querySelectorAll(".navigation li");a.forEach((e=>e.addEventListener("click",(()=>{for(let e=0;e<a.length;e++)a[e].classList.contains("tab-clicked")&&a[e].classList.remove("tab-clicked");e.classList.add("tab-clicked")}))))})(),p(),(()=>{const e=document.querySelector(".nav-today"),t=document.querySelector(".nav-long-term");e.addEventListener("click",p),t.addEventListener("click",h)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,